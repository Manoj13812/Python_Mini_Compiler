# Start Statements

file_input: (NEWLINE | stmt)* ENDMARKER
stmt: simple_stmt | compound_stmt

# Basic Statements
test: or_test ['if' or_test 'else' test]
suite: simple_stmt | NEWLINE INDENT stmt+ DEDENT
simple_stmt: small_stmt (';' small_stmt)* [';'] NEWLINE

small_stmt: (expr_stmt | import_stmt | assert_stmt)

expr_stmt: testlist_star_expr (annassign | augassign (testlist) | ('=' (testlist_star_expr))*)
import_stmt: import_name | import_from

if_stmt: 'if' test ':' suite ('elif' test ':' suite)* ['else' ':' suite]

for_stmt: 'for' exprlist 'in' testlist ':' suite ['else' ':' suite]


exprlist: (expr|star_expr) (',' (expr|star_expr))* [',']
testlist: test (',' test)* [',']


or_test: and_test ('or' and_test)*
and_test: not_test ('and' not_test)*
not_test: 'not' not_test | comparison

comparison: expr (comp_op expr)*
expr: xor_expr ('|' xor_expr)*
star_expr: '*' expr

comp_op: '<'|'>'|'=='|'>='|'<='|'<>'|'!='|'in'|'not' 'in'|'is'|'is' 'not'

compound_stmt: if_stmt | for_stmt

xor_expr: and_expr ('^' and_expr)*
and_expr: shift_expr ('&' shift_expr)*
shift_expr: arith_expr (('<<'|'>>') arith_expr)*
arith_expr: term (('+'|'-') term)*

term: factor (('*'|'@'|'/'|'%'|'//') factor)*
factor: ('+'|'-'|'~') factor | power

# Exponential Operator
power: atom_expr ['**' factor]

atom_expr: [AWAIT] atom trailer*

atom: ('(' [testlist_comp] ')' |
       '[' [testlist_comp] ']' |
       NAME | NUMBER | STRING+ | '...' | 'None' | 'True' | 'False')

testlist_comp: (test|star_expr) ( comp_for | (',' (test|star_expr))* [','] )

trailer: '(' [arglist] ')' | '[' subscriptlist ']' | '.' NAME
subscriptlist: subscript (',' subscript)* [',']
subscript: test | [test] ':' [test] [sliceop]

#Slicing Operator
sliceop: ':' [test]
annassign: ':' test ['=' test]

testlist_star_expr: (test|star_expr) (',' (test|star_expr))* [',']
augassign: ('+=' | '-=' | '*=' | '@=' | '/=' | '%=' | '&=' | '|=' | '^=' |
            '<<=' | '>>=' | '**=' | '//=')

#Import statements and its variations
import_name: 'import' dotted_as_names
# note below: the ('.' | '...') is necessary because '...' is tokenized as ELLIPSIS
import_from: ('from' (('.' | '...')* dotted_name | ('.' | '...')+)
              'import' ('*' | '(' import_as_names ')' | import_as_names))
import_as_name: NAME ['as' NAME]
dotted_as_name: dotted_name ['as' NAME]
import_as_names: import_as_name (',' import_as_name)* [',']
dotted_as_names: dotted_as_name (',' dotted_as_name)*
dotted_name: NAME ('.' NAME)*
assert_stmt: 'assert' test [',' test]
